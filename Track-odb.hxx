// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef TRACK_ODB_HXX
#define TRACK_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20475UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Track.hpp"

#include "Albums-odb.hxx"
#include "Artists-odb.hxx"
#include "Genres-odb.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Track
  //
  template <>
  struct class_traits< ::Track >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Track >
  {
    public:
    typedef ::Track object_type;
    typedef ::Track* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // Track
  //
  template <typename A>
  struct pointer_query_columns< ::Track, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // title
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    title_type_;

    static const title_type_ title;

    // artist_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    artist_id_type_;

    static const artist_id_type_ artist_id;

    // album_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    album_id_type_;

    static const album_id_type_ album_id;

    // genre_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    genre_id_type_;

    static const genre_id_type_ genre_id;

    // lyrics
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    lyrics_type_;

    static const lyrics_type_ lyrics;

    // duration
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    duration_type_;

    static const duration_type_ duration;

    // year
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    year_type_;

    static const year_type_ year;

    // file_location
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    file_location_type_;

    static const file_location_type_ file_location;
  };

  template <typename A>
  const typename pointer_query_columns< ::Track, id_sqlite, A >::id_type_
  pointer_query_columns< ::Track, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Track, id_sqlite, A >::title_type_
  pointer_query_columns< ::Track, id_sqlite, A >::
  title (A::table_name, "\"title\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Track, id_sqlite, A >::artist_id_type_
  pointer_query_columns< ::Track, id_sqlite, A >::
  artist_id (A::table_name, "\"artist_id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Track, id_sqlite, A >::album_id_type_
  pointer_query_columns< ::Track, id_sqlite, A >::
  album_id (A::table_name, "\"album_id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Track, id_sqlite, A >::genre_id_type_
  pointer_query_columns< ::Track, id_sqlite, A >::
  genre_id (A::table_name, "\"genre_id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Track, id_sqlite, A >::lyrics_type_
  pointer_query_columns< ::Track, id_sqlite, A >::
  lyrics (A::table_name, "\"lyrics\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Track, id_sqlite, A >::duration_type_
  pointer_query_columns< ::Track, id_sqlite, A >::
  duration (A::table_name, "\"duration\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Track, id_sqlite, A >::year_type_
  pointer_query_columns< ::Track, id_sqlite, A >::
  year (A::table_name, "\"year\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Track, id_sqlite, A >::file_location_type_
  pointer_query_columns< ::Track, id_sqlite, A >::
  file_location (A::table_name, "\"file_location\"", 0);

  template <>
  class access::object_traits_impl< ::Track, id_sqlite >:
    public access::object_traits< ::Track >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // title_
      //
      details::buffer title_value;
      std::size_t title_size;
      bool title_null;

      // artist_id_
      //
      long long artist_id_value;
      bool artist_id_null;

      // album_id_
      //
      long long album_id_value;
      bool album_id_null;

      // genre_id_
      //
      long long genre_id_value;
      bool genre_id_null;

      // lyrics_
      //
      details::buffer lyrics_value;
      std::size_t lyrics_size;
      bool lyrics_null;

      // duration_
      //
      double duration_value;
      bool duration_null;

      // year_
      //
      details::buffer year_value;
      std::size_t year_size;
      bool year_null;

      // file_location_
      //
      details::buffer file_location_value;
      std::size_t file_location_size;
      bool file_location_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct artist_id_tag;
    struct album_id_tag;
    struct genre_id_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::Track, id_common >:
    public access::object_traits_impl< ::Track, id_sqlite >
  {
  };

  // Track
  //
  template <>
  struct alias_traits<
    ::Artists,
    id_sqlite,
    access::object_traits_impl< ::Track, id_sqlite >::artist_id_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::Albums,
    id_sqlite,
    access::object_traits_impl< ::Track, id_sqlite >::album_id_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::Genres,
    id_sqlite,
    access::object_traits_impl< ::Track, id_sqlite >::genre_id_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::Track, id_sqlite >
  {
    // artist_id
    //
    typedef
    odb::alias_traits<
      ::Artists,
      id_sqlite,
      access::object_traits_impl< ::Track, id_sqlite >::artist_id_tag>
    artist_id_alias_;

    // album_id
    //
    typedef
    odb::alias_traits<
      ::Albums,
      id_sqlite,
      access::object_traits_impl< ::Track, id_sqlite >::album_id_tag>
    album_id_alias_;

    // genre_id
    //
    typedef
    odb::alias_traits<
      ::Genres,
      id_sqlite,
      access::object_traits_impl< ::Track, id_sqlite >::genre_id_tag>
    genre_id_alias_;
  };

  template <typename A>
  struct query_columns< ::Track, id_sqlite, A >:
    query_columns_base< ::Track, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // title
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    title_type_;

    static const title_type_ title;

    // artist_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    artist_id_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::Artists,
        id_sqlite,
        artist_id_alias_ > >
    artist_id_pointer_type_;

    struct artist_id_type_: artist_id_pointer_type_, artist_id_column_type_
    {
      artist_id_type_ (const char* t, const char* c, const char* conv)
        : artist_id_column_type_ (t, c, conv)
      {
      }
    };

    static const artist_id_type_ artist_id;

    // album_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    album_id_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::Albums,
        id_sqlite,
        album_id_alias_ > >
    album_id_pointer_type_;

    struct album_id_type_: album_id_pointer_type_, album_id_column_type_
    {
      album_id_type_ (const char* t, const char* c, const char* conv)
        : album_id_column_type_ (t, c, conv)
      {
      }
    };

    static const album_id_type_ album_id;

    // genre_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    genre_id_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::Genres,
        id_sqlite,
        genre_id_alias_ > >
    genre_id_pointer_type_;

    struct genre_id_type_: genre_id_pointer_type_, genre_id_column_type_
    {
      genre_id_type_ (const char* t, const char* c, const char* conv)
        : genre_id_column_type_ (t, c, conv)
      {
      }
    };

    static const genre_id_type_ genre_id;

    // lyrics
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    lyrics_type_;

    static const lyrics_type_ lyrics;

    // duration
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    duration_type_;

    static const duration_type_ duration;

    // year
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    year_type_;

    static const year_type_ year;

    // file_location
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    file_location_type_;

    static const file_location_type_ file_location;
  };

  template <typename A>
  const typename query_columns< ::Track, id_sqlite, A >::id_type_
  query_columns< ::Track, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::Track, id_sqlite, A >::title_type_
  query_columns< ::Track, id_sqlite, A >::
  title (A::table_name, "\"title\"", 0);

  template <typename A>
  const typename query_columns< ::Track, id_sqlite, A >::artist_id_type_
  query_columns< ::Track, id_sqlite, A >::
  artist_id (A::table_name, "\"artist_id\"", 0);

  template <typename A>
  const typename query_columns< ::Track, id_sqlite, A >::album_id_type_
  query_columns< ::Track, id_sqlite, A >::
  album_id (A::table_name, "\"album_id\"", 0);

  template <typename A>
  const typename query_columns< ::Track, id_sqlite, A >::genre_id_type_
  query_columns< ::Track, id_sqlite, A >::
  genre_id (A::table_name, "\"genre_id\"", 0);

  template <typename A>
  const typename query_columns< ::Track, id_sqlite, A >::lyrics_type_
  query_columns< ::Track, id_sqlite, A >::
  lyrics (A::table_name, "\"lyrics\"", 0);

  template <typename A>
  const typename query_columns< ::Track, id_sqlite, A >::duration_type_
  query_columns< ::Track, id_sqlite, A >::
  duration (A::table_name, "\"duration\"", 0);

  template <typename A>
  const typename query_columns< ::Track, id_sqlite, A >::year_type_
  query_columns< ::Track, id_sqlite, A >::
  year (A::table_name, "\"year\"", 0);

  template <typename A>
  const typename query_columns< ::Track, id_sqlite, A >::file_location_type_
  query_columns< ::Track, id_sqlite, A >::
  file_location (A::table_name, "\"file_location\"", 0);
}

#include "Track-odb.ixx"

#include <odb/post.hxx>

#endif // TRACK_ODB_HXX
